(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{375:function(t,a,s){"use strict";s.r(a);var r=s(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),s("h2",{attrs:{id:"设计模式的三大类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的三大类"}},[t._v("#")]),t._v(" 设计模式的三大类")]),t._v(" "),s("h3",{attrs:{id:"创建型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),s("p",[t._v("对类的实例化过程进行了抽象，能够将软件模块中"),s("strong",[t._v("对象的创建")]),t._v("和对象的使用分离")]),t._v(" "),s("blockquote",[s("p",[t._v("工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式")])]),t._v(" "),s("h3",{attrs:{id:"结构型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),s("p",[t._v("关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像"),s("strong",[t._v("搭积木")]),t._v("，可以通过简单积木的组合形成复杂的，功能更为强大的结构")]),t._v(" "),s("blockquote",[s("p",[t._v("适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式")])]),t._v(" "),s("h3",{attrs:{id:"行为型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),s("p",[t._v("关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的"),s("strong",[t._v("相互作用")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式")])])])}),[],!1,null,null,null);a.default=e.exports}}]);